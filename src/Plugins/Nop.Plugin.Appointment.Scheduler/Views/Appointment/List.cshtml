@model Nop.Plugin.Appointment.Scheduler.Models.AppointmentSearchModel

@{
    Layout = "_AdminLayout";

    ////page title
    //ViewBag.PageTitle = T("Admin.Catalog.Products.EditProductDetails").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Appointment Scheduler");

    const string hideSearchBlockAttributeName = "QueuedEmailsPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<form asp-controller="Appointment" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.System.QueuedEmails")
        </h1>
        <div class="pull-right">
            <a asp-action="Create" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.PollListButtons })
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row search-row opened">
                            <div class="search-text">@T("Admin.Common.Search")</div>
                            <div class="icon-search"><i class="fa fa-search" aria-hidden="true"></i></div>
                            <div class="icon-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></div>
                        </div>


                        <div class="search-body">

                            <div class="row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchStartDate" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchStartDate" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <nop-label asp-for="SearchEndDate" />
                                        </div>
                                        <div class="col-md-8">
                                            <nop-editor asp-for="SearchEndDate" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-7 col-md-offset-5">
                                    <button type="button" id="search-queuedappointments" class="btn btn-primary btn-search">
                                        <i class="fa fa-search"></i>
                                        @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        @await Html.PartialAsync("Table", new DataTablesModel
                        {
                            Name = "appointment-grid",
                            UrlRead = new DataUrl("AppointmentList", "Appointment", null),
                            SearchButtonId = "search-queuedappointments",
                            Length = Model.PageSize,
                            LengthMenu = Model.AvailablePageSizes,
                            Filters = new List<FilterParameter>
                            {
                                new FilterParameter(nameof(Model.SearchStartDate), typeof(DateTime?)),
                                new FilterParameter(nameof(Model.SearchEndDate), typeof(DateTime?)),
                                new FilterParameter(nameof(Model.SearchCustomerEmail)),
                                new FilterParameter(nameof(Model.SearchSpecialistEmail))
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                                new ColumnProperty(nameof(AppointmentModel.Id))
                                {
                                    IsMasterCheckBox = true,
                                    Render = new RenderCheckBox("checkbox_appointment"),
                                    ClassName =  NopColumnClassDefaults.CenterAll,
                                    Width = "50"
                                },
                                new ColumnProperty(nameof(AppointmentModel.Id))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.Id").Text,
                                    Width = "50",
                                },
                                new ColumnProperty(nameof(AppointmentModel.Date))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.Date").Text,
                                    Render = new RenderDate()
                                },
                                new ColumnProperty(nameof(AppointmentModel.SpecialistUsername))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.SpecialistUsername").Text,
                                    Width = "100",
                                },
                                new ColumnProperty(nameof(AppointmentModel.CustomerUsername))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.CustomerUsername").Text,
                                    Width = "100",
                                },
                                new ColumnProperty(nameof(AppointmentModel.UpdatedOn))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.UpdatedOn").Text,
                                    Width = "150",
                                    Render = new RenderDate()
                                },
                                new ColumnProperty(nameof(AppointmentModel.UpdatedBy))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.UpdatedBy").Text,
                                    Width = "150",
                                },
                                new ColumnProperty(nameof(AppointmentModel.Id))
                                {
                                    Title = T("Plugins.Appointment.Scheduler.EditButton").Text,
                                    Width = "50",
                                    ClassName =  NopColumnClassDefaults.Button,
                                    Render = new RenderButtonEdit(new DataUrl("Edit"))
                                }
                            }
                        })

                        @*<script>
                                $(document).ready(function() {
                                    $("#@Html.IdFor(model => model.GoDirectlyToNumber)").keydown(function (event) {
                                        if (event.keyCode === 13) {
                                            $("#go-to-email-by-number").click();
                                            return false;
                                        }
                                    });

                                    //"delete selected" button
                                    $("#delete-selected-action-confirmation-submit-button").bind("click", function () {
                                        var postData = {
                                            selectedIds: selectedIds
                                        };
                                        addAntiForgeryToken(postData);
                                        $.ajax({
                                            cache: false,
                                            type: "POST",
                                            url: "@(Url.Action("DeleteSelected", "QueuedEmail"))",
                                            data: postData,
                                            traditional: true,
                                            error: function (jqXHR, textStatus, errorThrown) {
                                                $('#deleteSelectedFailed-info').text(errorThrown);
                                                $("#deleteSelectedFailed").click();
                                            },
                                            complete: function (jqXHR, textStatus) {
                                                updateTable('#queuedEmails-grid');
                                            }
                                        });
                                        $('#delete-selected-action-confirmation').modal('toggle');
                                        return false;
                                    });
                                });
                            </script>*@


                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<nop-alert asp-alert-id="deleteSelectedFailed" />
